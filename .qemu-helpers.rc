#!/usr/bin/false


# qemu alias
# (qemu alias and qemu function cannot coexist)
#alias qemu='
# TMPDIR=/tmp/ \
# qemu-system-x86_64 \
# -accel kvm \
# -machine q35 -m 2048 \
# -cpu Nehalem,kvm=off -smp 2 \
# -device qemu-xhci -device usb-tablet \
# -parallel null -serial mon:stdio
#'


# qemu command line helper (function)
# (qemu function and qemu alias cannot coexist)
#	use configuration file if exists AND executable
#	otherwise call qemu with defined/prefered parameters
#	additional parameters (override) are forwarded in both cases
#	(use #!/usr/bin/false as shebang in configuration file to avoid execution)
qemu() {
	local config=qemu.cfg
	local qemu=qemu-system-x86_64
	if [[ -s "$config" ]] && [[ -x "$config" ]]
	then
		local args
		mapfile -t args < <( sed 's/#.*//g; s/ /\n/g; /^[[:space:]]*$/d' "$config" )
		TMPDIR=/tmp/ \
		"$qemu" \
		"${args[@]}" \
		"$@"
	else
		TMPDIR=/tmp/ \
		"$qemu" \
		-accel kvm \
		-machine q35 -m 2048 \
		-cpu Nehalem,kvm=off -smp 2 \
		-device qemu-xhci -device usb-tablet \
		-parallel null -serial mon:stdio \
		"$@"
	fi
}


# qemu-img create helper (bash function)
#	no need to specify backing file format (auto-detected)
#	and/or desired file format (qcow2 by default)
# qemu-img tree helper (bash function)
#	display dependencies (base images) in tree form
qemu-img () {
	local bin=/usr/bin/qemu-img
	local verb=$1
	shift
	local base baseFormat format
	if [[ "$verb" == "create" ]]
	then
		local opt OPTARG OPTIND
		while getopts ':b:F:f:' opt
		do
			case $opt in
				b) base=$OPTARG;;
				F) baseFormat=$OPTARG;;
				f) format=$OPTARG;;
				\?) echo "-$OPTARG: option not covered by helper" >&2 && return 1;;
			esac
		done
		shift "$((OPTIND-1))"
		[[ -n "$format" ]] ||
			format='qcow2'
		if [[ -n "$base" ]]
		then
			[[ ! -e "$base" ]] \
				&& echo 'Base image: no such file or directory' >&2 \
				&& return 1
			[[ ! -r "$base" ]] \
				&& echo 'Base image: no read permission' >&2 \
				&& return 1
			[[ -w "$base" ]] \
				&& echo 'Base image: base image is writable' >&2 \
				&& return 1
			[[ -n "$baseFormat" ]] \
				|| baseFormat=$(
					[[ "$( head -c4 "$base" | base64 )" == "UUZJ+w==" ]] \
						&& echo qcow2 \
						|| echo raw
				)
			"$bin" "$verb" -b "$base" -F "$baseFormat" -f "$format" "$@"
		else
			"$bin" "$verb" -f "$format" "$@"
		fi
	elif [[ "$verb" == "tree" ]]
	then
		local info
		info=$( qemu-img info --force-share --output=json "$1" )
		if [[ -n "$info" ]]
		then
			local virtualSize diskSize fileFormat backingFile
			IFS=$'\n' read -s -r -d '' virtualSize diskSize fileFormat backingFile < <(
				jq -r '."virtual-size",."actual-size",."format",."full-backing-filename"' <<< "$info"
			)
			IFS=$'\n' read -srd '' virtualSize diskSize < <(
				numfmt --to=iec "$virtualSize" "$diskSize"
			)
			[[ -n "$2" ]] && [[ -w "$1" ]] && tput setaf 3
			[[ "${fileFormat,,}" == "raw" ]] \
				&& printf '%s%s (%s - %s)\n' "$2" "$1" "${fileFormat^^}" "$virtualSize" \
				|| printf '%s%s (%s - %s / %s)\n' "$2" "$1" "${fileFormat^^}" "$diskSize" "$virtualSize"
			tput sgr0
			[[ "$backingFile" != "null" ]] \
				&& qemu-img tree "$( readlink -ve "$backingFile" || echo "$backingFile" )" " ${2:-└─ }"
		else
			return 1
		fi
	else
		[[ -z "$verb" ]] \
			&& "$bin" --help \
			|| "$bin" "$verb" "$@"
	fi
}


# qemu USB helper (bash function)
qemu-usbhost() {
	local usb busport product vendor
	while IFS= read -r -d '' usb
	do
		cat "$usb"/product 2>/dev/null || echo 'unknown device'
		busport=${usb##*/}
		printf ' %s\n' "$(
			sed -e 's/-/,hostport=/' \
			    -e 's/^/device_add usb-host,hostbus=/' \
			    -e 's/$/,id=usb-host-'"$busport"/ <<< "$busport"
		)"
		IFS= read -r vendor < "$usb"/idVendor
		IFS= read -r product < "$usb"/idProduct
		printf ' device_add usb-host,vendorid=0x%s,productid=0x%s,id=usb-host-%s-%s\n\n' \
			"$vendor" "$product" "$vendor" "$product"
	done < <(
		find /sys/bus/usb/devices/ \
		     -regextype posix-egrep \
		     -regex '^/sys/bus/usb/devices/[0-9]+-[0-9]+$' \
		     -print0
	) | tr '[:upper:]' '[:lower:]'
}


# vim: set ft=sh :
